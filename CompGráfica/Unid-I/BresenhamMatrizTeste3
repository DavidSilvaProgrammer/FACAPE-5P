#include <stdio.h>

#define ROWS 10
#define COLS 20

void bresenham(int x0, int y0, int x1, int y1, int matrix[ROWS][COLS]) {
    int dx = x1 - x0;
    int dy = y1 - y0;
    int sx, sy, err, e2;

    if (dy < 0) {
        dy = -dy;
        sy = -1;
    } else {
        sy = 1;
    }

    if (dx < 0) {
        dx = -dx;
        sx = -1;
    } else {
        sx = 1;
    }

    err = dx - dy;

    while (x0 != x1 || y0 != y1) {
        if (x0 >= 0 && x0 < COLS && y0 >= 0 && y0 < ROWS) {
            matrix[y0][x0] = 1; // Define o pixel como parte da linha
        }

        e2 = 2 * err;
        if (e2 > -dy) {
            err -= dy;
            x0 += sx;
        }
        if (e2 < dx) {
            err += dx;
            y0 += sy;
        }
    }
}

int main() {
    int matrix[ROWS][COLS] = {0}; // Inicializa a matriz com zeros

    // Defina os pontos inicial e final da linha
    int x0 = 2, y0 = 1;
    int x1 = 17, y1 = 8;

    // Desenha a linha usando o algoritmo de Bresenham
    bresenham(x0, y0, x1, y1, matrix);

    // Imprime a matriz
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }

    return 0;
}


/*

O cÃ³digo que vocÃª forneceu implementa o algoritmo de Bresenham para desenhar uma linha em uma matriz bidimensional. Vamos analisÃ¡-lo:

    VariÃ¡veis e InicializaÃ§Ã£o:
        As variÃ¡veis dx e dy representam as diferenÃ§as nas coordenadas x e y entre os pontos inicial e final da linha.
        sx e sy sÃ£o usados para determinar a direÃ§Ã£o da linha (positiva ou negativa) ao longo dos eixos x e y.
        err e e2 sÃ£o variÃ¡veis auxiliares para acompanhar o erro acumulado durante o desenho da linha.
        A matriz matrix Ã© inicializada com zeros.

    Tratamento de Sinais:
        O cÃ³digo verifica se dx e dy sÃ£o negativos e ajusta as variÃ¡veis sx e sy de acordo.
        Isso garante que o algoritmo funcione corretamente, independentemente da direÃ§Ã£o da linha.

    Loop Principal:
        O loop while continua atÃ© que os pontos inicial e final da linha sejam iguais.
        Para cada ponto (x0, y0) no caminho da linha, o cÃ³digo verifica se estÃ¡ dentro dos limites da matriz e, se sim, define o valor como 1 (representando que o pixel faz parte da linha).
        O erro Ã© atualizado com base nas diferenÃ§as dx e dy.
        Os valores de x0 e y0 sÃ£o atualizados de acordo com os sinais de sx e sy.

    FunÃ§Ã£o main:
        Define os pontos inicial e final da linha (x0, y0, x1, y1).
        Chama a funÃ§Ã£o bresenham para desenhar a linha na matriz.
        Imprime a matriz resultante.

 ðŸ˜Š

*/
