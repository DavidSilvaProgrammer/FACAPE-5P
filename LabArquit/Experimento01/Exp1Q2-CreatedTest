#include <pic18f4550.h>

void main() {
    bit calcular, ok0, ok1, ok2, ok3, ok4, ok5, ok6, ok7;
    TrisB = 0xFF; // Todas as portas B como entradas
    TrisD = 0x00; // Todas as portas D como saídas
    PortB = 0xFF;
    PortD = 0xFF;
    ADCON1 = 0x0F;
    CMCON = 7;
    RBPU_bit = 0;
    calcular = 0;
    ok0 = 1;
    ok1 = 1;
    ok2 = 1;
    ok3 = 1;
    ok4 = 1;
    ok5 = 1;
    ok6 = 1;
    ok7 = 1;

    while (1) {
        if (C0 == 0 && ok0) {
            PortD = PortD - 0x01;
            calcular = 1;
            ok0 = 0;
        }
        if (C1 == 0 && ok1) {
            PortD = PortD - 0x02;
            calcular = 1;
            ok1 = 0;
        }
        if (C2 == 0 && ok2) {
            PortD = PortD - 0x04;
            calcular = 1;
            ok2 = 0;
        }
        if (C3 == 0 && ok3) {
            PortD = PortD - 0x08;
            calcular = 1;
            ok3 = 0;
        }
        if (C4 == 0 && ok4) {
            PortD = PortD - 0x10;
            calcular = 1;
            ok4 = 0;
        }
        if (C5 == 0 && ok5) {
            PortD = PortD - 0x20;
            calcular = 1;
            ok5 = 0;
        }
        if (C6 == 0 && ok6) {
            PortD = PortD - 0x40;
            calcular = 1;
            ok6 = 0;
        }
        if (C7 == 0 && ok7) {
            PortD = PortD - 0x80;
            calcular = 1;
            ok7 = 0;
        }

        if (calcular) {
            // Ajuste os coeficientes m e b conforme necessário
            int m = 4; // Exemplo: ajuste manual
            int b = 10; // Exemplo: ajuste manual

            // Aplicação da equação da reta
            int saida = m * PortD + b;

            // Aplicação do sistema de complemento de dois para números negativos
            if (saida < 0) {
                saida = 64 + saida; // Escala 64
            }

            PortD = saida;
            calcular = 0;
        }
    }
}


******************


/*



    Configuração Inicial:
        As portas B são definidas como entradas (TrisB = 0xFF).
        As portas D são definidas como saídas (TrisD = 0x00).
        ADCON1 é configurado para 0x0F (modo digital).
        CMCON é configurado para 7 (desativa o comparador analógico).
        RBPU_bit é definido como 0 (habilita as resistências pull-up internas).

    Variáveis de Controle:
        calcular: Indica se o cálculo da saída deve ser realizado.
        ok0, ok1, …, ok7: Variáveis de controle para cada porta C.

    Loop Principal:
        O programa entra em um loop infinito (while(1)).
        Verifica se o botão C0 foi pressionado e se a variável ok0 é verdadeira. Se sim, decrementa o valor de PortD em 1 e define calcular como verdadeiro.
        Repete o mesmo processo para os outros botões C (C1, C2, …, C7).

    Cálculo da Saída:
        Coeficientes m e b são ajustados conforme necessário.
        A equação da reta é aplicada: saida = m * PortD + b.
        Para números negativos, é aplicado o sistema de complemento de dois.
        O resultado é armazenado em PortD.

    Observações:
        O código assume que os botões C estão conectados e funcionando corretamente.
        Os valores de m e b devem ser ajustados com base nos requisitos específicos do seu projeto.

*/


*****************************

/*

Vamos analisar o código em C e entender cada parte dele. Também projetaremos um firmware para exibir na saída o resultado da equação de reta com base no gráfico fornecido.

    Configuração Inicial:
        TrisB = 0xFF;: Define todas as portas B como entradas.
        TrisD = 0x00;: Define todas as portas D como saídas.
        PortB = 0xFF;: Define todas as portas B com nível alto (1).
        PortD = 0xFF;: Define todas as portas D com nível alto (1).
        ADCON1 = 0x0F;: Configura o ADC para modo digital.
        CMCON = 7;: Desativa o comparador analógico.
        RBPU_bit = 0;: Habilita as resistências pull-up internas.

    Variáveis de Controle:
        tarefa: Não está sendo usada no código fornecido.
        calcular: Indica se o cálculo da saída deve ser realizado.
        ok0, ok1, …, ok7: Variáveis de controle para cada porta C.

    Loop Principal:
        O programa entra em um loop infinito (while(1)).
        Verifica se o botão C0 foi pressionado e se a variável ok0 é verdadeira. Se sim, decrementa o valor de PortD em 1 e define calcular como verdadeiro.
        Repete o mesmo processo para os outros botões C (C1, C2, …, C7).

    Cálculo da Saída:
        Não está completamente implementado no código fornecido. O trecho de código que faz o cálculo da saída está incompleto (após if (calcular)).
        O ajuste dos coeficientes m e b não está presente no código. Esses valores devem ser ajustados com base nos requisitos específicos do projeto.
        A aplicação da equação da reta (saida = m * PortD + b) e a conversão para sistema de complemento de dois para números negativos também não estão implementadas.

    Observações:
        O código não está completo e precisa ser ajustado para calcular corretamente a saída com base na entrada das chaves.
        É importante definir os coeficientes m e b com base na relação entre as escalas de entrada e saída (16 e 256, respectivamente).
        A implementação do cálculo da saída deve considerar a conversão para números negativos usando o sistema de complemento de dois.

Para completar o código, você precisará adicionar o trecho que calcula a saída com base na equação de reta e ajustar os coeficientes conforme necessário.


*/
