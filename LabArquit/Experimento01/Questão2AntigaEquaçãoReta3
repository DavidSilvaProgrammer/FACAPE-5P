#include <pic18f4550.h>

// Defina os pinos de entrada e saída
#define DIP_SWITCH PORTB // Pinos RB0-RB7 como entrada (dip-switch)
#define LEDS PORTD // Pinos RD0-RD7 como saída (LEDs)

void main() {
    // Coeficientes da equação da reta
    float m = -17.0; // Coeficiente angular
    float b = 127.0; // Coeficiente linear

    // Variáveis para controle do loop e cálculos
    int entrada;
    int saida;

    // Configuração dos pinos
    TRISB = 0xFF; // Configura os pinos RB0-RB7 como entrada
    TRISD = 0x00; // Configura os pinos RD0-RD7 como saída

    // Loop infinito para ler as entradas e calcular as saídas
    while (1) {
        // Lê os valores do dip-switch de entrada
        entrada = DIP_SWITCH;

        // Calcula a saída usando a equação da reta
        saida = (int)(m * entrada + b);

        // Tratamento de números negativos (sistema de complemento de dois)
        if (saida < 0) {
            saida = ~saida+1;
        }

        // Atualiza os LEDs com o valor de saída
        LEDS = saida;
    }
}

*********************


//Segunda versão

#include <pic18f4550.h>

// Configurações iniciais
void setup() {
    // Configura os pinos de entrada e saída
    TRISC = 0b00001111; // RC0 a RC3 como entrada (chaves), RC4 a RC7 como saída (LEDs)
}

// Função para converter entrada em saída
int convertInputToOutput(int entrada) {
    int saida;

    // Aplica a equação da reta
    saida = -17 * entrada + 127;

    // Tratamento para números negativos (sistema de complemento de dois)
    if (saida < 0) {
        saida = ~saida + 1;
    }

    return saida;
}

void main() {
    int entrada = 0; // Valor da entrada (0 a 15)

    setup();

    // Loop infinito
    while (1) {
        // Lê o valor das chaves (entrada)
        entrada = PORTC & 0b00001111;

        // Converte a entrada em saída
        int saida = convertInputToOutput(entrada);

        // Atualiza os LEDs com o valor da saída
        PORTC = (PORTC & 0b11110000) | (saida & 0b00001111);
    }
}
